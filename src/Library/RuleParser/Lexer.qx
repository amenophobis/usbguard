header {
//
// Copyright (C) 2015 Red Hat, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Authors: Daniel Kopecek <dkopecek@redhat.com>
//
#include "Common/Utility.hpp"
}

start = RULE;

mode RULE :
     <entry: DQ_STRING_READER>
     <exit: DQ_STRING_READER>
     <entry: PQ_STRING_READER>
     <exit: PQ_STRING_READER>
{
	<<EOF>> => RULE_TOKEN_TERMINATION;

	[ \t\r\n]+ { }

	"{" => RULE_TOKEN_CURLYBRACE_OPEN;
	"}" => RULE_TOKEN_CURLYBRACE_CLOSE;
        "!" => RULE_TOKEN_NEGATION;

	"allow" => RULE_TOKEN_KEYWORD_ALLOW;
	"block" => RULE_TOKEN_KEYWORD_BLOCK;
	"reject" => RULE_TOKEN_KEYWORD_REJECT;
        "match" => RULE_TOKEN_KEYWORD_MATCH;
        "device" => RULE_TOKEN_KEYWORD_DEVICE;

	"name" => RULE_TOKEN_KEYWORD_NAME;
	"hash" => RULE_TOKEN_KEYWORD_HASH;
	"via-port" => RULE_TOKEN_KEYWORD_VIAPORT;
	"with-interface" => RULE_TOKEN_KEYWORD_WITHINTERFACE;
	"serial" => RULE_TOKEN_KEYWORD_SERIAL;
        "if" => RULE_TOKEN_KEYWORD_IF;

	"all-of" => RULE_TOKEN_SET_OPERATOR(Lexeme);
	"any-of" => RULE_TOKEN_SET_OPERATOR(Lexeme);
	"one-of" => RULE_TOKEN_SET_OPERATOR(Lexeme);
	"none-of" => RULE_TOKEN_SET_OPERATOR(Lexeme);
	"equals" => RULE_TOKEN_SET_OPERATOR(Lexeme);
	"equals-ordered" => RULE_TOKEN_SET_OPERATOR(Lexeme);

        "allowed-matches" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "localtime" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "true" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "false" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "random" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "rule-applied" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);
        "rule-evaluated" => RULE_TOKEN_CONDITION_IDENTIFIER(Lexeme);

         [:xdigit:]{4}":"[:xdigit:]{4} => RULE_TOKEN_DEVICE_VPID(Lexeme);
         [:xdigit:]{4}":*" => RULE_TOKEN_DEVICE_VID(Lexeme);
         "*:*" => RULE_TOKEN_DEVICE_ANYID;

         [:xdigit:]{2}":"[:xdigit:]{2}":"[:xdigit:]{2} => RULE_TOKEN_INTERFACE_TYPE_FULL(Lexeme);
         [:xdigit:]{2}":"[:xdigit:]{2}":*" => RULE_TOKEN_INTERFACE_TYPE_SUBCLASS(Lexeme);
         [:xdigit:]{2}":*:*" => RULE_TOKEN_INTERFACE_TYPE_CLASS(Lexeme);

	"\"" {
	     self_send(RULE_TOKEN_DQ_STRING_BEGIN);
	     self << DQ_STRING_READER;
	     RETURN;
	}

        "(" {
          self_send(RULE_TOKEN_PQ_STRING_BEGIN);
          self << PQ_STRING_READER;
          RETURN;
        }
}

mode DQ_STRING_READER :
     <entry: RULE>
     <exit: RULE>
{
	on_entry { self_accumulator_clear(); }
	on_exit {
		self_accumulator_flush(RULE_TOKEN_DQ_STRING);
		self_send(RULE_TOKEN_DQ_STRING_END);
	}

	// Escaped double quote
	"\\\"" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Escaped escape character
	"\\\\" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Byte encoded in hex
	"\\x"[0-9a-fA-F]{2} { self_accumulator_add(Lexeme, LexemeEnd); }

	"\"" {
	     self << RULE;
	     RETURN;
	}

	. { self_accumulator_add(Lexeme, LexemeEnd); }

	<<FAIL>> {
		 throw std::runtime_error("Invalid double-quoted string");
	}
}

mode PQ_STRING_READER :
     <entry: RULE>
     <exit: RULE>
{
	on_entry { self_accumulator_clear(); }
	on_exit {
		self_accumulator_flush(RULE_TOKEN_PQ_STRING);
		self_send(RULE_TOKEN_PQ_STRING_END);
	}

	// Escaped double quote
	"\\(" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Escaped escape character
	"\\\\" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Byte encoded in hex
	"\\x"[0-9a-fA-F]{2} { self_accumulator_add(Lexeme, LexemeEnd); }

	")" {
	     self << RULE;
	     RETURN;
	}

	. { self_accumulator_add(Lexeme, LexemeEnd); }

	<<FAIL>> {
		 throw std::runtime_error("Invalid parameter string");
	}
}

